from generator import *
from pMetricGeneral3 import *
from scenarioGeneral import *
import copy

# n and m are passed in

# generate m samples each of n normal distributions
# means and std dev for each can be generated by another distribution

def reductionStage(n, m):
    values, distances, means, std_devs, probs = generateMatrix(n, m)

    #store a copy of values, distances
    original_values = copy.deepcopy(values)
    original_distances = copy.deepcopy(distances)
    original_probs = copy.deepcopy(probs)
    original_means = copy.deepcopy(means)
    original_std_devs = copy.deepcopy(std_devs)


    #assume that we are going to remove n/2 scenarios for now
    probs,distances,values,removed = eliminate_K(probs,distances,n//2,values)

    # update the means and standard deviation
    for i in reversed(len(original_means)):
        if i in removed:
            np.delete(means, i)
            np.delete(std_devs, i)
    # temporary
    v = 10, p = 0.7

    var_vals, obj_vals = solve_cplex(v, p, n, values, probs, means)



if __name__=="__main__":
    reductionStage(10, 10)
